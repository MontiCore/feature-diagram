/* (c) https://github.com/MontiCore/monticore */

import de.monticore.MCTask
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id "monticore" version "6.2.0-SNAPSHOT"
    id "maven-publish"
    id 'jacoco'
}

allprojects {
    group = "de.monticore.lang"
    version = "0.0.3-SNAPSHOT"
}

subprojects {

    apply plugin: "java"
    apply plugin: "monticore"

    buildDir = file("$projectDir/target")

    ext.grammarDir = "src/main/grammars"
    ext.mc_version = "6.2.0-SNAPSHOT"
    ext.junit_version = "4.12"
    ext.outDir = "$buildDir/generated-sources/monticore/sourcecode"

    dependencies {
        implementation group:"de.monticore", name:"monticore-runtime", version:mc_version
        implementation group:"de.monticore", name:"monticore-grammar", version:mc_version
        implementation group:"de.se_rwth.commons", name:"se-commons-logging", version:"1.7.10-SNAPSHOT"
        implementation group:"de.se_rwth.commons", name:"se-commons-utilities", version:"1.7.10-SNAPSHOT"
        implementation group:"de.se_rwth.commons", name:"se-commons-groovy", version:"1.7.10-SNAPSHOT"

        testImplementation group:"junit", name:"junit", version:junit_version

    }

    test {
        testLogging {
            // controls whether test output is shown
            showStandardStreams= ("false").equals(getProperty("showTestOutput"))? false : true
            showExceptions true
            showCauses true
            showStackTraces true
            events TestLogEvent.FAILED
            TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
            info {
                events TestLogEvent.FAILED,
                        TestLogEvent.PASSED,
                        TestLogEvent.SKIPPED,
                        TestLogEvent.STANDARD_OUT
            }
        }
        reports {
            junitXml.enabled = false
            html.enabled = false
        }
    }

    repositories {
        if(("true").equals(getProperty("useLocalRepo"))){
            mavenLocal()
        }
        maven {
            credentials.username mavenUser
            credentials.password mavenPassword
            url repo
        }
    }

    sourceSets {
        main.java.srcDirs += [ outDir ]
    }

    // Fixes issue with java plugin in projects without resources
    compileTestJava.doFirst { mkdir sourceSets.main.output.resourcesDir }

    sourceCompatibility = "1.8"

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.deprecation false
        options.warnings = false
    }

    compileJava {
        dependsOn project.collect { it.tasks.withType(MCTask) }
    }

    // configure deployment
    publishing {
        repositories.maven {
            credentials.username mavenUser
            credentials.password mavenPassword
            def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
            def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
        }
    }


}