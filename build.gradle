/* (c) https://github.com/MontiCore/monticore */

plugins {
    id "java"
    id "monticore"  version "$mc_version" // MontiCore Plugin
    id "maven-publish"
    id "com.github.johnrengelman.shadow" version "$shadow_plugin_version"
}



allprojects {
    group = 'de.monticore.lang'

    repositories {
      if(("true").equals(getProperty('useLocalRepo'))){
        mavenLocal()
      }
        maven {
            credentials.username mavenUser
            credentials.password mavenPassword
            url repo
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    dependencies {
        implementation group: 'de.monticore', name: 'monticore-grammar', version: mc_version
        implementation group: 'de.monticore', name: 'monticore-runtime', version: mc_version
        implementation group: 'de.se_rwth.commons', name: 'se-commons-logging', version: logging_version
        implementation group: 'org.codehaus.plexus', name: 'plexus-archiver', version: plexus_archiver_version
        implementation group: 'commons-cli', name: 'commons-cli', version: commons_cli_version
        implementation group: 'com.google.guava', name: 'guava', version: guava_version

        testImplementation group: 'junit', name: 'junit', version: junit_version
    }

    // configure non-standard source sets
    sourceSets {
        main.java.srcDirs += ["$projectDir/target/generated-sources/monticore/sourcecode"]
    }



    buildDir = file("$projectDir/target")


    sourceCompatibility = '1.8'
}

project(':fd-lang') {
    apply plugin : 'java'
    apply plugin : 'monticore'
    apply plugin : 'com.github.johnrengelman.shadow'

    dependencies {
        implementation group: 'org.antlr', name: 'antlr4-runtime', version: antlr_version
        grammar ("de.monticore:monticore-grammar:$mc_version") {capabilities {
          requireCapability("de.monticore:monticore-grammar-grammars") }
        }
    }

    description = 'Feature Diagram Language'

    task  generateFeatureDiagram (type: MCTask) {
        grammar = file "$grammarDir/de/monticore/FeatureDiagram.mc4"
        outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
        def uptoDate = incCheck("de/monticore/FeatureDiagram.mc4")
        outputs.upToDateWhen { uptoDate }
    }

    task  generateFeatureConfiguration (type: MCTask) {
        grammar = file "$grammarDir/de/monticore/FeatureConfiguration.mc4"
        outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
        def uptoDate = incCheck("de/monticore/FeatureConfiguration.mc4")
        outputs.upToDateWhen { uptoDate }
    }

    task  generateFeatureConfigurationPartial (type: MCTask) {
        grammar = file "$grammarDir/de/monticore/FeatureConfigurationPartial.mc4"
        outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
        def uptoDate = incCheck("de/monticore/FeatureConfigurationPartial.mc4")
        outputs.upToDateWhen { uptoDate }
    }

    generateFeatureConfiguration.dependsOn(generateFeatureDiagram)
    generateFeatureConfigurationPartial.dependsOn(generateFeatureConfiguration)


configurations { MLC }
dependencies { MLC (group: 'de.monticore.lang', name: 'mlc-gradle', version: '7.1.0-SNAPSHOT') }
StringJoiner joiner = new StringJoiner(" ")
configurations.compileClasspath.resolve().each{joiner.add(it.toString()) }
joiner.add "$rootDir/target/symbols"
String mp = joiner.toString()

// two tasks per MLC file
fileTree(".").matching { include '**/*.mlc' }.each {
    def f = it
    def mlcName = it.getName().substring(0, it.getName().lastIndexOf('.'))

    task "showArtifacts${mlcName}"(type: JavaExec) {
        classpath = configurations.MLC
        group = 'MLC'
        mainClass = 'de.monticore.mlc.MLCCLI'
        args "-input", f, "-projectDir", projectDir, "-mp", mp, "-s", "-all"
        dependsOn(generate${mlcName})
    }

    task "checkArtifacts${mlcName}"(type: JavaExec) {
        classpath = configurations.MLC
        group = 'MLC'
        mainClass = 'de.monticore.mlc.MLCCLI'
        args "-input", f, "-projectDir", projectDir, "-mp", mp, "-s", "-check"
        dependsOn(generate${mlcName})
    }
}


    compileJava {
        dependsOn project.collect { it.tasks.withType(MCTask) }
    }

    // build sources jar with handwritten + generated sources
    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from(sourceSets.main.allJava)
    }
  
  sourcesJar.dependsOn project.collect { it.tasks.withType(MCTask)}

    // build grammar jar as well
    task grammarJar(type: Jar) {
        from ("$projectDir/$grammarDir"){ include "**/*.mc4" }
        archiveClassifier = "grammars"
    }

    shadowJar { // all in one jar
        manifest {
            attributes "Main-Class": "de.monticore.featurediagram.FeatureDiagramCLI"
        }
        minimize() // sort out unused files automatically (does not find everything we don't need)
        archiveClassifier = "fd-cli"
        archiveFileName  =  "FeatureDiagramCLI.jar"
    }

    task buildFeatureConfigurationToolCLI(type: Jar, dependsOn: shadowJar) {
        archiveFileName = 'FeatureConfigurationCLI.jar'
        archiveClassifier = "fc-cli"
        manifest {
            attributes('Main-Class': 'de.monticore.featureconfiguration.FeatureConfigurationCLI')
        }
        from zipTree(shadowJar.archiveFile)
    }

    task buildFeatureConfigurationToolPartialCLI(type: Jar, dependsOn: shadowJar) {
        archiveFileName = 'FeatureConfigurationPartialCLI.jar'
        archiveClassifier = "fcp-cli"
        manifest {
            attributes('Main-Class': 'de.monticore.featureconfigurationpartial.FeatureConfigurationPartialCLI')
        }
        from zipTree(shadowJar.archiveFile)
    }

//    jar.dependsOn(shadowJar)
    jar.dependsOn(buildFeatureConfigurationToolCLI)
    jar.dependsOn(buildFeatureConfigurationToolPartialCLI)

    // configure deployment
    publishing {
        // configure what artifacts to publish
        publications {
            mavenJava(MavenPublication) {
                artifactId = "$project.name"
                from components.java
                artifact sourcesJar
                artifact grammarJar
                artifact shadowJar
                artifact buildFeatureConfigurationToolCLI
                artifact buildFeatureConfigurationToolPartialCLI
            }
        }
        repositories.maven {
            credentials.username mavenUser
            credentials.password mavenPassword
            def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
            def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}


project(':fd-analysis') {

    apply plugin: 'java'
    apply plugin : 'com.github.johnrengelman.shadow'

    dependencies {
        implementation project(':fd-lang')
        implementation group: 'org.choco-solver', name: 'choco-solver', version: choco_solver_version
        implementation (group: 'org.choco-solver', name: 'choco-parsers', version: choco_parser_version){
            exclude group: "xcsp3", module:"xcsp3"
        }

        implementation group:'org.sat4j', name: 'org.sat4j.core', version: sat4j_version
        implementation group: 'org.logicng', name: 'logicng', version: logicng_version
    }

    description = 'Feature Diagram Analyses'

    // build sources jar with handwritten + generated sources
    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from(sourceSets.main.allJava)
    }
  
  sourcesJar.dependsOn project.collect { it.tasks.withType(MCTask)}

    shadowJar { // all in one jar
        manifest {
            attributes "Main-Class": "mcfdtool.FACT"
        }
        minimize() // sort out unused files automatically (does not find everything we don't need)
        archiveFileName  =  "FACT.jar"
        archiveClassifier = "cli"
    }

    jar.dependsOn(shadowJar)

    // configure deployment
    publishing {
        // configure what artifacts to publish
        publications {
            mavenJava(MavenPublication) {
                artifactId = "$project.name"
                from components.java
                artifact sourcesJar
                artifact shadowJar
            }
        }
        repositories.maven {
            credentials.username mavenUser
            credentials.password mavenPassword
            def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
            def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

task buildAll(type: GradleBuild) {
  tasks = [ 'build' ]
}

defaultTasks 'build'
