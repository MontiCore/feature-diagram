/* (c) https://github.com/MontiCore/monticore */

/**
  FeatureDiagram describes the language to define FDs.
  This includes trees of arbitrary depth, but not additional 
  constructs, such as exclusion or requirement.
*/

grammar FeatureDiagram extends de.monticore.Cardinality,
                               de.monticore.types.MCBasicTypes,
                               de.monticore.expressions.CommonExpressions{

  FDCompilationUnit = ("package" package:MCQualifiedName ";")?
                      MCImportStatement*
                      FeatureDiagram;

  symbol scope FeatureDiagram =
    "featurediagram" Name "{"
      FDElement*
    "}";
    
  /**
    A feature diagram consists of a list of FD element, which are defined by
    this nonterminal. Each must be terminated with a ";"
  */
  interface FDElement;

  symbol Feature = Name;

  FeatureTreeRule implements FDElement = Name@Feature "->" FeatureGroup ";";

  FeatureConstraint implements FDElement = ConstraintExpression ";" ;

  // This should be Name@Feature, but due to a MontiCore Bug this is not possible (protected method in interface)
  interface FeatureGroup = Name+;

  /**
    This demands: All features must be chosen ( e.g., A = B & C & D; )
  */
  AndGroup implements FeatureGroup = Name@Feature (optional:"?")? ("&" Name@Feature (optional:"?")?)*;

  /**
    This demands: Exactly one feature must be chosen ( e.g., A = B ^ C ^ D; )
  */
  XorGroup implements FeatureGroup = Name@Feature ( "^" Name@Feature )+;

  /**
    This demands: One or more features must be chosen ( e.g.,  A = B | C | D; )
  */
  OrGroup implements FeatureGroup = Name@Feature ( "|" Name@Feature )+;

  /** 
    Specify a range of features ( e.g., A = [2..3] (B, C, D); )
    selectable at that level (subfeatures do not count)
  */
  CardinalizedGroup implements FeatureGroup =
                               Cardinality "of" "{" ( Name@Feature | "," )+ "}";


  interface ConstraintExpression;

  Constraint implements ConstraintExpression = Expression;

  Requires implements Expression<115>, InfixExpression =
    left:Expression operator:"requires" right:Expression;

  Excludes implements Expression<116>, InfixExpression =
    left:Expression operator:"excludes" right:Expression;


  symbolrule FeatureDiagram =
                   rootFeature:featurediagram._symboltable.FeatureSymbol
                   features:featurediagram._symboltable.FeatureSymbol*
                   ;

  astrule FeatureDiagram =
                   features:featurediagram._ast.ASTFeature*
                   rootFeature:featurediagram._ast.ASTFeature
                   ;

  /**
    Feature Symbols carry their names (already there),
    the optional flag (TODO: warum dieses? Und was bedeutet es?)
    and the list of subfeatures (TODO: reicht das?)
  */
  symbolrule Feature =
                   children:featurediagram._symboltable.FeatureGroup*
                   ;

}
