/* (c) https://github.com/MontiCore/monticore */

/* Alpha-version: This is intended to become a MontiCore stable grammar. */

/**
  FeatureDiagram describes the language to define FDs.
  This includes trees of arbitrary depth, but not additional 
  constructs, such as exclusion or requirement.
*/

grammar FeatureDiagram extends de.monticore.Cardinality,
                               de.monticore.types.MCBasicTypes,
                               de.monticore.expressions.CommonExpressions {

  FDCompilationUnit = ("package" package:MCQualifiedName ";")?
                      MCImportStatement*
                      FeatureDiagram;

  /**
    A feature diagram has a name and a body with a list of feature diagram
    elements. It introduces a feature diagram symbol and spans a scope.
    All symbols of features in this diagram are directly contained in this
    scope, yielding a flat namespace of feature names.
  */
  symbol scope FeatureDiagram =
    "featurediagram" Name "{"
      FDElement*
    "}";
    
  /**
    A feature diagram consists of a list of FD element, which are defined by
    this nonterminal. Each must be terminated with a ";".
    This is an extension point that can be used to add further elements of a
    feature diagram through language extension or language embedding.
  */
  interface FDElement;


  /**
    This grammar rule produces FeatureSymbols that are used within other
    production of this grammar. However, this rule is never directly used by
    the parser as it is not connected to the start rule.
  */
  symbol Feature = Name;

  /**
    Each rule of the feature tree has a feature name on the left-hand side and
    a feature group on the right-hand side.
  */
  FeatureTreeRule implements FDElement = Name@Feature "->" FeatureGroup ";";

  /**
    The "Expression" nonterminal is an extension point that can be used via language extension or
    language embedding to add further kinds of cross-tree constraint expressions
  */
  FeatureConstraint implements FDElement = constraint:Expression ";" ;

  /*
  This is an extension point for adding novel kinds of feature groups to the language.
  Each feature group must contain a non-empty list of GroupParts.
  */
  interface FeatureGroup = GroupPart+;

  /**
    This producton produces an AST class for the optionality. Through this,
    the optionality can be associated with a feature name in the AST.
  */
  GroupPart = Name@Feature optional:["?"]?;

  /**
    This demands: All features must be chosen ( e.g., A = B & C & D; )
    A group with single feature is parsed as AndGroup.
  */
  AndGroup implements FeatureGroup = (GroupPart || "&")+;

  /**
    This demands: Exactly one feature must be chosen ( e.g., A = B ^ C ^ D; )
    This group must contain at least two features
  */
  XorGroup implements FeatureGroup = GroupPart ( "^" GroupPart )+;

  /**
    This demands: One or more features must be chosen ( e.g.,  A = B | C | D; )
    This group must contain at least two features
  */
  OrGroup implements FeatureGroup = GroupPart ( "|" GroupPart )+;

  /** 
    Specify a range of features ( e.g., A = [2..3] (B, C, D); )
    selectable at that level (subfeatures do not count)
  */
  CardinalizedGroup implements FeatureGroup =
                               Cardinality "of" "{" ( GroupPart || "," )+ "}";

  Requires implements Expression <115>, InfixExpression =
    left:Expression operator:"requires" right:Expression;

  Excludes implements Expression <116>, InfixExpression =
    left:Expression operator:"excludes" right:Expression;

}
