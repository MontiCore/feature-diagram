
grammar FeatureDiagram extends de.monticore.Cardinality,
                               de.monticore.types.MCBasicTypes {

  FDCompilationUnit = ("package" package:MCQualifiedName ";")?
                      (MCImportStatement)*
                      FeatureDiagram;

  symbol scope FeatureDiagram =
    "featurediagram" Name "{"
      FDElement*
    "}";
    
  interface FDElement;

  RootFeature implements FDElement = "root" Feature ";";

  // Elemental feature, either mandatory or optional
  symbol Feature = Name ( optional:["?"] )?;

  FeatureTreeRule implements FDElement = Name@Feature "=" FeatureGroup ";";

  interface FeatureGroup = Feature+;

  // All features must be chosen ( e.g., A = B & C & D; )
  AndGroup implements FeatureGroup = ( Feature || "&" )+;

  // Exactly one feature must be chosen ( e.g., A = B ^ C ^ D; )
  XorGroup implements FeatureGroup = Feature ( "^" Feature )+;

  // One or more features must be chosen ( e.g.,  A = B | C | D; )
  OrGroup implements FeatureGroup = Feature ( "|" Feature )+;

  // Specify a range of features ( e.g., A = [2..3] (B, C, D); )
  CardinalizedGroup implements FeatureGroup = Cardinality "(" ( Feature || "," )+ ")";

  FeatureConstraint implements FDElement =
                     "constraint" ("{" ( ConstraintExpression ";" )* "}"
                                  | ConstraintExpression ";" );
    
  interface ConstraintExpression;
  
  RequiresConstraint implements ConstraintExpression =
                       a:Name@Feature "requires" b:Name@Feature;
  
  ExcludesConstraint implements ConstraintExpression =
                       a:Name@Feature "excludes" b:Name@Feature;

}