grammar FeatureDiagram extends de.monticore.UMLStereotype, de.monticore.Cardinality {

  symbol scope FeatureDiagram =
    Stereotype? "featurediagram" Name "{"
      FDElement*
    "}";
    
  interface FDElement;

  // all features are "defined" at the RHS of a feature tree rule
  // EXCEPT the root feature, which is the left-hand side of the first feature-tree rule
  FeatureTreeRule implements FDElement =
    Stereotype? Name "=" FeatureGroup ";" ;

  interface FeatureGroup = Feature+ ;

  // CompositeFeature -> all features must be chosen
  // Example A = B & C & D
  AndFeatureGroup implements FeatureGroup = ( Feature || "&" )+ ;

  // XorFeature -> exactly one feature must be chosen
  // Example A = B ^ C ^ D
  XorFeatureGroup implements FeatureGroup = Feature ( "^" Feature )+ ;

  // OrFeature -> one or more features must be chosen
  // Example A = B | C | D
  OrFeatureGroup implements FeatureGroup = Feature ( "|" Feature )+ ;

  // CardinalizedFeature -> specify a range of features, for example
  // Example A = [2..3] (B, C, D)
  CardinalizedFeatureGroup implements FeatureGroup = Cardinality "(" ( Feature || "," )+ ")" ;

  // Elemental Feature
  // - can be enhanced with stereotypes
  // - can be optional (?)
  symbol Feature = Stereotype? Name ( optional:["?"] )? ;
  
  FeatureConstraint implements FDElement =
    "constraint" ("{" ( ConstraintExpression ";" )* "}" | ConstraintExpression ";" ) ;
    
  interface ConstraintExpression ;
  
  RequiresConstraint implements ConstraintExpression = a:Name@Feature "requires" b:Name@Feature ;
  
  ExcludesConstraint implements ConstraintExpression = a:Name@Feature "excludes" b:Name@Feature ;
  
}